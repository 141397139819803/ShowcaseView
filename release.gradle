task release << {
    println versionName
}

release.dependsOn('editReadme')
release.dependsOn('library:uploadArchives')
release.finalizedBy('commitRelease')

task commitRelease(type: Exec) {
    if (project.hasProperty('versionName')) {
        commandLine 'git', "commit", "README.md", "-m", "Update to version " + versionName
    } else {
//        throw new TaskExecutionException(tasks['commitRelease'], new NullPointerException("No version name supplied"))
    }
}

task createGithubRelease(type: Exec) {
    def jsonData = JsonOutput.toJson([
            tag_name : "v$versionName",
            name: "v$versionName",
            draft: true])
    commandLine "curl", "--data", jsonData, "-u", "amlcurran:" + System.getenv('GITHUB_TOKEN'), "https://api.github.com/repos/amlcurran/ShowcaseView/releases"
}


import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

task editReadme(type: Copy) {
    from('.') {
        include 'README-template.md'
        rename('README-template.md', 'README.md')
        filter(ReplaceTokens, tokens: ['version': versionName])
    }
    into '.'
}
